list(
name = data$string[k],
nb = neighbor_list[k],
id = k,
x = post$x_avg[k],
p = post$p_avg[k],
xs = post$x_avg[neighbor_list[[k]]$j],
ps = post$p_avg[neighbor_list[[k]]$j]
)
)
pack = packed[[1]]
pack
# unpacking
observed = pack$name
nbs = pack$nb
id = pack$id
x = pack$x
p = pack$p
xs = pack$xs
ps = pack$ps
observed
nbs
# Combining posterior information into one list
packed = lapply(seq_along(data$string), function(k)
list(
name = data$string[k],
nb = neighbor_list[[k]],
id = k,
x = post$x_avg[k],
p = post$p_avg[k],
xs = post$x_avg[neighbor_list[[k]]$j],
ps = post$p_avg[neighbor_list[[k]]$j]
)
)
pack = packed[[1]]
# unpacking
observed = pack$name
nbs = pack$nb
id = pack$id
x = pack$x
p = pack$p
xs = pack$xs
ps = pack$ps
nbs
ds = c(0, nbs$d)
ds
observed = pack$name
nbs = pack$nb
id = pack$id
x = pack$x
p = pack$p
xs = pack$xs
ps = pack$ps
# Appending self to the neighbor list
js = c(id, nbs$j)
ds = c(0, nbs$d)
xs = c(x, xs)
ps = c(p, ps)
observed = pack$name
nbs = pack$nb
id = pack$id
x = pack$x
p = pack$p
xs = pack$xs
ps = pack$ps
delta = 0.076
# Computing likelihood
phi_self = (1-delta)*p
phi_self
# Computing off-diagonal posterior
ws = exp(-lambda*nbs$d)
lambda = 1
# Computing off-diagonal posterior
ws = exp(-lambda*nbs$d)
# Computing off-diagonal posterior
ws = exp(-nbs$d/lambda)
ws = ws/sum(ws)
sum(ws)
phis = delta*ps*ws
phis
# Computing off-diagonal posterior
ws = exp(-nbs$d*xs/lambda)
ws = ws/sum(ws)
ws
xs
x = as.numeric(pack$x > 0.99)
p = pack$p
xs = as.numeric(pack$xs > 0.99)
ps = pack$ps
# Computing posterior
phi_self = (1-delta)*p*x
phi_self
phis
observed = pack$name
nbs = pack$nb
id = pack$id
x = as.numeric(pack$x > 0.99)
p = pack$p
xs = as.numeric(pack$xs > 0.99)
ps = pack$ps
# Computing posterior
phi_self = (1-delta)*p*x
# Computing off-diagonal posterior
ws = exp(-nbs$d*xs/lambda)
ws = ws/sum(ws)
phis = delta*ps*ws
phi_self
max(c(phi_self, phis))
# Computing off-diagonal posterior
ws = xs*exp(-nbs$d/lambda)
ws = ifelse(max(ws)>0,ws/sum(ws),ws)
phis = delta*ps*ws
# Computing off-diagonal posterior
ws = xs*exp(-nbs$d/lambda)
ws = ifelse(max(ws)>0,ws/sum(ws),ws)
ws = if(max(ws) > 0){ws/sum(ws)} else {ws}
# Computing off-diagonal posterior
ws = xs*exp(-nbs$d/lambda)
ws = if(max(ws) > 0){ws/sum(ws)} else {ws}
# Computing off-diagonal posterior
ws = xs*exp(-nbs$d/lambda)
ws = if(max(ws) > 0){ws/sum(ws)} else {ws}
ws
phis = delta*ps*ws
phis
# Picking posterior mode
if(max(c(phi_self, phis) == 0)){
bayes_choice = 0
} else {
if(phi_self > max(phis)){
bayes_choice = id
} else {
bayes_choice = nbs$j[which(phis) == max(phis)][1]
}
}
bayes_choice
# Picking posterior mode
if(max(c(phi_self, phis) == 0)){
bayes_choice = 0
} else {
if(phi_self > max(phis)){
bayes_choice = id
} else {
bayes_choice = nbs$j[which(phis) == max(phis)][1]
}
}
# Picking posterior mode
if(max(c(phi_self, phis)) == 0){
bayes_choice = 0
} else {
if(phi_self > max(phis)){
bayes_choice = id
} else {
bayes_choice = nbs$j[which(phis) == max(phis)][1]
}
}
bayes_choice
# Returning self + bayes choice
out = as.data.frame(cbind(observed, bayes_choice))
out
# Combining posterior information into one list
packed = lapply(seq_along(data$string), function(k)
list(
name = data$string[k],
nb = neighbor_list[[k]],
id = k,
x = post$x_avg[k],
p = post$p_avg[k],
xs = post$x_avg[neighbor_list[[k]]$j],
ps = post$p_avg[neighbor_list[[k]]$j]
)
)
# Sending common objects to the global environment
delta = mean(post$delta_samples)
delta
# Helper function for classifying individual surnames
bayes_choice_helper = function(pack){
# unpacking
observed = pack$name
nbs = pack$nb
id = pack$id
x = as.numeric(pack$x > 0.99)
p = pack$p
xs = as.numeric(pack$xs > 0.99)
ps = pack$ps
# Computing posterior
phi_self = (1-delta)*p*x
# Computing off-diagonal posterior
ws = xs*exp(-nbs$d/lambda)
ws = if(max(ws) > 0){ws/sum(ws)} else {ws}
phis = delta*ps*ws
# Picking posterior mode
if(max(c(phi_self, phis)) == 0){
bayes_choice_id = NA
} else {
if(phi_self > max(phis)){
bayes_choice_id = id
} else {
bayes_choice_id = nbs$j[which(phis) == max(phis)][1]
}
}
# Returning self + bayes choice
as.data.frame(cbind(observed, bayes_choice))
}
ncores = 6
# Setting up the cluster
cl <- makeCluster(ncores)
# Setting up the cluster
cl <- parallel::makeCluster(ncores)
# Sending common objects to the global environment
delta = mean(post$delta_samples)
# 4) export your globals and functions
clusterExport(cl,
varlist = c("delta", "lambda", "bayes_choice_helper"),
envir   = environment()
)
# 4) export your globals and functions
parallel::clusterExport(cl,
varlist = c("delta", "lambda", "bayes_choice_helper"),
envir   = environment()
)
# Finding the bayes choice (index) for each name
bayes_choices <- pblapply::pblapply(
X   = packed,
FUN = bayes_choice_helper,
cl  = cl
)
# Finding the bayes choice (index) for each name
bayes_choices <- pbapply::pblapply(
X   = packed,
FUN = bayes_choice_helper,
cl  = cl
)
# Helper function for classifying individual surnames
bayes_choice_helper = function(pack){
# unpacking
observed = pack$name
nbs = pack$nb
id = pack$id
x = as.numeric(pack$x > 0.99)
p = pack$p
xs = as.numeric(pack$xs > 0.99)
ps = pack$ps
# Computing posterior
phi_self = (1-delta)*p*x
# Computing off-diagonal posterior
ws = xs*exp(-nbs$d/lambda)
ws = if(max(ws) > 0){ws/sum(ws)} else {ws}
phis = delta*ps*ws
# Picking posterior mode
if(max(c(phi_self, phis)) == 0){
bayes_choice_id = NA
} else {
if(phi_self > max(phis)){
bayes_choice_id = id
} else {
bayes_choice_id = nbs$j[which(phis) == max(phis)][1]
}
}
# Returning self + bayes choice
as.data.frame(cbind(observed, bayes_choice_id))
}
# Setting up the cluster
cl <- parallel::makeCluster(ncores)
# export your globals and functions
delta = mean(post$delta_samples)
parallel::clusterExport(cl,
varlist = c("delta", "lambda", "bayes_choice_helper"),
envir   = environment()
)
# Finding the bayes choice (index) for each name
bayes_choices <- pbapply::pblapply(
X   = packed,
FUN = bayes_choice_helper,
cl  = cl
)
# Finding the bayes choice (index) for each name
bayes_choices <- pbapply::pblapply(
X   = packed[1:100],
FUN = bayes_choice_helper,
cl  = cl
)
# Finding the bayes choice (index) for each name
bayes_choices <- pbapply::pblapply(
X   = packed[1:1000],
FUN = bayes_choice_helper,
cl  = cl
)
# Finding the bayes choice (index) for each name
bayes_choices <- pbapply::pblapply(
X   = packed[1:10000],
FUN = bayes_choice_helper,
cl  = cl
)
# Finding the bayes choice (index) for each name
bayes_choices <- pbapply::pblapply(
X   = packed[5000:8000],
FUN = bayes_choice_helper,
cl  = cl
)
# Finding the bayes choice (index) for each name
bayes_choices <- pbapply::pblapply(
X   = packed[7500:8000],
FUN = bayes_choice_helper,
cl  = cl
)
# Finding the bayes choice (index) for each name
bayes_choices <- pbapply::pblapply(
X   = packed[7900:8000],
FUN = bayes_choice_helper,
cl  = cl
)
# Finding the bayes choice (index) for each name
bayes_choices <- pbapply::pblapply(
X   = packed[7910:7940],
FUN = bayes_choice_helper,
cl  = cl
)
# Finding the bayes choice (index) for each name
bayes_choices <- pbapply::pblapply(
X   = packed[7920:7930],
FUN = bayes_choice_helper,
cl  = cl
)
# Finding the bayes choice (index) for each name
bayes_choices <- pbapply::pblapply(
X   = packed[7930:7940],
FUN = bayes_choice_helper,
cl  = cl
)
bayes_choice_helper(packed[[7930]])
bayes_choice_helper(packed[[7931]])
pack = packed[[7931]]
pacl
pack
# unpacking
observed = pack$name
nbs = pack$nb
id = pack$id
x = as.numeric(pack$x > 0.99)
p = pack$p
xs = as.numeric(pack$xs > 0.99)
ps = pack$ps
observed
# unpacking
observed = pack$name
nbs = pack$nb
id = pack$id
x = as.numeric(pack$x > 0.99)
p = pack$p
xs = as.numeric(pack$xs > 0.99)
ps = pack$ps
# Computing posterior
phi_self = (1-delta)*p*x
# Computing off-diagonal posterior
ws = xs*exp(-nbs$d/lambda)
ws = if(max(ws) > 0){ws/sum(ws)} else {ws}
phis = delta*ps*ws
phis
max(c(phi_self, phis)) == 0
phi_self > max(phis)
nbs$j[which(phis) == max(phis)][1]
bayes_choice_id = nbs$j[which(phis == max(phis))][1]
bayes_choice_id
# Helper function for classifying individual surnames
bayes_choice_helper = function(pack){
# unpacking
observed = pack$name
nbs = pack$nb
id = pack$id
x = as.numeric(pack$x > 0.99)
p = pack$p
xs = as.numeric(pack$xs > 0.99)
ps = pack$ps
# Computing posterior
phi_self = (1-delta)*p*x
# Computing off-diagonal posterior
ws = xs*exp(-nbs$d/lambda)
ws = if(max(ws) > 0){ws/sum(ws)} else {ws}
phis = delta*ps*ws
# Picking posterior mode
if(max(c(phi_self, phis)) == 0){
bayes_choice_id = NA
} else {
if(phi_self > max(phis)){
bayes_choice_id = id
} else {
bayes_choice_id = nbs$j[which(phis == max(phis))][1]
}
}
# Returning self + bayes choice
as.data.frame(cbind(observed, bayes_choice_id))
}
# Setting up the cluster
cl <- parallel::makeCluster(ncores)
# export your globals and functions
delta = mean(post$delta_samples)
parallel::clusterExport(cl,
varlist = c("delta", "lambda", "bayes_choice_helper"),
envir   = environment()
)
# Finding the bayes choice (index) for each name
bayes_choices <- pbapply::pblapply(
X   = packed[7930:7940],
FUN = bayes_choice_helper,
cl  = cl
)
# Finding the bayes choice (index) for each name
bayes_choices <- pbapply::pblapply(
X   = packed,
FUN = bayes_choice_helper,
cl  = cl
)
# 7) clean up
stopCluster(cl)
# 7) clean up
parallel::stopCluster(cl)
head(bayes_choice)
head(bayes_choices)
bayes_choices = do.call(rbind,bayes_choices)
# Returning surnames
bayes_choices$bayes_choice = all_surnames[bayes_choices$bayes_choice_id]
bayes_choices
bayes_choices
head(bayes_choices)
bayes_choices$bayes_choice_id
# Returning surnames
bayes_choices$bayes_choice = all_surnames[as.numeric(bayes_choices$bayes_choice_id)]
bayes_choices$bayes_choice_id
head(bayes_choices)
bayes_choices$bayes_choice_id = NULL
#'                 Defaults to 1.
#'
#' @return A data.frame with two columns:
#'   - `observed`: string vector of observed names.
#'   - `standard`: string vector of standardized names.
#'
#' @importFrom parallel detectCores makeCluster stopCluster
#' @importFrom pbapply pblapply
#' @importFrom stringdist stringdist
#' @export
make_bayes_choice_dictionary <- function(
all_names,
data,
neighbor_list,
lambda,
post,
ncores  = 1
) {
# Combining posterior information into one list
packed = lapply(seq_along(data$string), function(k)
list(
name = data$string[k],
nb = neighbor_list[[k]],
id = k,
x = post$x_avg[k],
p = post$p_avg[k],
xs = post$x_avg[neighbor_list[[k]]$j],
ps = post$p_avg[neighbor_list[[k]]$j]
)
)
# Helper function for classifying individual surnames
bayes_choice_helper = function(pack){
# unpacking
observed = pack$name
nbs = pack$nb
id = pack$id
x = as.numeric(pack$x > 0.99)
p = pack$p
xs = as.numeric(pack$xs > 0.99)
ps = pack$ps
# Computing posterior
phi_self = (1-delta)*p*x
# Computing off-diagonal posterior
ws = xs*exp(-nbs$d/lambda)
ws = if(max(ws) > 0){ws/sum(ws)} else {ws}
phis = delta*ps*ws
# Picking posterior mode
if(max(c(phi_self, phis)) == 0){
bayes_choice_id = NA
} else {
if(phi_self > max(phis)){
bayes_choice_id = id
} else {
bayes_choice_id = nbs$j[which(phis == max(phis))][1]
}
}
# Returning self + bayes choice
as.data.frame(cbind(observed, bayes_choice_id))
}
# Setting up the cluster
cl <- parallel::makeCluster(ncores)
# export your globals and functions
delta = mean(post$delta_samples)
parallel::clusterExport(cl,
varlist = c("delta", "lambda", "bayes_choice_helper"),
envir   = environment()
)
# Finding the bayes choice (index) for each name
bayes_choices <- pbapply::pblapply(
X   = packed,
FUN = bayes_choice_helper,
cl  = cl
)
bayes_choices = do.call(rbind,bayes_choices)
# 7) clean up
parallel::stopCluster(cl)
# Returning surnames
bayes_choices$bayes_choice = all_surnames[as.numeric(bayes_choices$bayes_choice_id)]
bayes_choices$bayes_choice_id = NULL
return(bayes_choices)
}
